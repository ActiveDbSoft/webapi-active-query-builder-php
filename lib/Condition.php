<?php
/**
 * Condition
 *
 * PHP version 5
 *
 * @category Class
 * @package  WebApiActiveQueryBuilder
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QueryBuilderApi
 *
 * Active Query Builder Web API lets create, analyze and modify SQL queries for different database servers using RESTful HTTP requests to a cloud-based service. It requires SQL execution context (information about database schema and used database server) to be stored under the registered account at https://webapi.activequerybuilder.com/.
 *
 * OpenAPI spec version: 1.1.8
 * Contact: support@activedbsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WebApiActiveQueryBuilder;

use \ArrayAccess;

/**
 * Condition Class Doc Comment
 *
 * @category    Class */
 // @description Defines a constraint for original query resultset values.
/** 
 * @package     WebApiActiveQueryBuilder
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Condition implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Condition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'field' => 'string',
        'condition_operator' => 'string',
        'values' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'field' => 'field',
        'condition_operator' => 'conditionOperator',
        'values' => 'values'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'field' => 'setField',
        'condition_operator' => 'setConditionOperator',
        'values' => 'setValues'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'field' => 'getField',
        'condition_operator' => 'getConditionOperator',
        'values' => 'getValues'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const CONDITION_OPERATOR_IS_NULL = 'IsNull';
    const CONDITION_OPERATOR_IS_NOT_NULL = 'IsNotNull';
    const CONDITION_OPERATOR_EQUAL = 'Equal';
    const CONDITION_OPERATOR_NOT_EQUAL = 'NotEqual';
    const CONDITION_OPERATOR_LESS = 'Less';
    const CONDITION_OPERATOR_NOT_LESS = 'NotLess';
    const CONDITION_OPERATOR_LESS_EQUAL = 'LessEqual';
    const CONDITION_OPERATOR_NOT_LESS_EQUAL = 'NotLessEqual';
    const CONDITION_OPERATOR_GREATER = 'Greater';
    const CONDITION_OPERATOR_NOT_GREATER = 'NotGreater';
    const CONDITION_OPERATOR_GREATER_EQUAL = 'GreaterEqual';
    const CONDITION_OPERATOR_NOT_GREATER_EQUAL = 'NotGreaterEqual';
    const CONDITION_OPERATOR_BETWEEN = 'Between';
    const CONDITION_OPERATOR_NOT_BETWEEN = 'NotBetween';
    const CONDITION_OPERATOR_IN = 'In';
    const CONDITION_OPERATOR_NOT_IN = 'NotIn';
    const CONDITION_OPERATOR_CONTAINS = 'Contains';
    const CONDITION_OPERATOR_DOESNT_CONTAIN = 'DoesntContain';
    const CONDITION_OPERATOR_STARTS_WITH = 'StartsWith';
    const CONDITION_OPERATOR_DOESNT_START_WITH = 'DoesntStartWith';
    const CONDITION_OPERATOR_ENDS_WITH = 'EndsWith';
    const CONDITION_OPERATOR_DOESNT_END_WITH = 'DoesntEndWith';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getConditionOperatorAllowableValues()
    {
        return [
            self::CONDITION_OPERATOR_IS_NULL,
            self::CONDITION_OPERATOR_IS_NOT_NULL,
            self::CONDITION_OPERATOR_EQUAL,
            self::CONDITION_OPERATOR_NOT_EQUAL,
            self::CONDITION_OPERATOR_LESS,
            self::CONDITION_OPERATOR_NOT_LESS,
            self::CONDITION_OPERATOR_LESS_EQUAL,
            self::CONDITION_OPERATOR_NOT_LESS_EQUAL,
            self::CONDITION_OPERATOR_GREATER,
            self::CONDITION_OPERATOR_NOT_GREATER,
            self::CONDITION_OPERATOR_GREATER_EQUAL,
            self::CONDITION_OPERATOR_NOT_GREATER_EQUAL,
            self::CONDITION_OPERATOR_BETWEEN,
            self::CONDITION_OPERATOR_NOT_BETWEEN,
            self::CONDITION_OPERATOR_IN,
            self::CONDITION_OPERATOR_NOT_IN,
            self::CONDITION_OPERATOR_CONTAINS,
            self::CONDITION_OPERATOR_DOESNT_CONTAIN,
            self::CONDITION_OPERATOR_STARTS_WITH,
            self::CONDITION_OPERATOR_DOESNT_START_WITH,
            self::CONDITION_OPERATOR_ENDS_WITH,
            self::CONDITION_OPERATOR_DOESNT_END_WITH,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['condition_operator'] = isset($data['condition_operator']) ? $data['condition_operator'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("IsNull", "IsNotNull", "Equal", "NotEqual", "Less", "NotLess", "LessEqual", "NotLessEqual", "Greater", "NotGreater", "GreaterEqual", "NotGreaterEqual", "Between", "NotBetween", "In", "NotIn", "Contains", "DoesntContain", "StartsWith", "DoesntStartWith", "EndsWith", "DoesntEndWith");
        if (!in_array($this->container['condition_operator'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'condition_operator', must be one of #{allowed_values}.";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("IsNull", "IsNotNull", "Equal", "NotEqual", "Less", "NotLess", "LessEqual", "NotLessEqual", "Greater", "NotGreater", "GreaterEqual", "NotGreaterEqual", "Between", "NotBetween", "In", "NotIn", "Contains", "DoesntContain", "StartsWith", "DoesntStartWith", "EndsWith", "DoesntEndWith");
        if (!in_array($this->container['condition_operator'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets field
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     * @param string $field Column of original query to which a constraint will applied.
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets condition_operator
     * @return string
     */
    public function getConditionOperator()
    {
        return $this->container['condition_operator'];
    }

    /**
     * Sets condition_operator
     * @param string $condition_operator Condition operator.
     * @return $this
     */
    public function setConditionOperator($condition_operator)
    {
        $allowed_values = array('IsNull', 'IsNotNull', 'Equal', 'NotEqual', 'Less', 'NotLess', 'LessEqual', 'NotLessEqual', 'Greater', 'NotGreater', 'GreaterEqual', 'NotGreaterEqual', 'Between', 'NotBetween', 'In', 'NotIn', 'Contains', 'DoesntContain', 'StartsWith', 'DoesntStartWith', 'EndsWith', 'DoesntEndWith');
        if (!in_array($condition_operator, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'condition_operator', must be one of 'IsNull', 'IsNotNull', 'Equal', 'NotEqual', 'Less', 'NotLess', 'LessEqual', 'NotLessEqual', 'Greater', 'NotGreater', 'GreaterEqual', 'NotGreaterEqual', 'Between', 'NotBetween', 'In', 'NotIn', 'Contains', 'DoesntContain', 'StartsWith', 'DoesntStartWith', 'EndsWith', 'DoesntEndWith'");
        }
        $this->container['condition_operator'] = $condition_operator;

        return $this;
    }

    /**
     * Gets values
     * @return string[]
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     * @param string[] $values List of values for a constraint. 'IsNull', 'IsNotNull' need no values; 'Between', 'NotBetween' require 2 values; 'In' accepts one or more values; other conditions accept single value only.
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\WebApiActiveQueryBuilder\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\WebApiActiveQueryBuilder\ObjectSerializer::sanitizeForSerialization($this));
    }
}


